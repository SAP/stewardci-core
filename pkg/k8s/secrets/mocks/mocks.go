// /*
// #########################
// #  SAP Steward-CI       #
// #########################
//
// THIS CODE IS GENERATED! DO NOT TOUCH!
//
// Copyright SAP SE.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SAP/stewardci-core/pkg/k8s/secrets (interfaces: SecretProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockSecretProvider is a mock of SecretProvider interface
type MockSecretProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecretProviderMockRecorder
}

// MockSecretProviderMockRecorder is the mock recorder for MockSecretProvider
type MockSecretProviderMockRecorder struct {
	mock *MockSecretProvider
}

// NewMockSecretProvider creates a new mock instance
func NewMockSecretProvider(ctrl *gomock.Controller) *MockSecretProvider {
	mock := &MockSecretProvider{ctrl: ctrl}
	mock.recorder = &MockSecretProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretProvider) EXPECT() *MockSecretProviderMockRecorder {
	return m.recorder
}

// GetSecret mocks base method
func (m *MockSecretProvider) GetSecret(arg0 string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockSecretProviderMockRecorder) GetSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretProvider)(nil).GetSecret), arg0)
}

// IsNotFound mocks base method
func (m *MockSecretProvider) IsNotFound(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFound", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFound indicates an expected call of IsNotFound
func (mr *MockSecretProviderMockRecorder) IsNotFound(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFound", reflect.TypeOf((*MockSecretProvider)(nil).IsNotFound), arg0)
}
