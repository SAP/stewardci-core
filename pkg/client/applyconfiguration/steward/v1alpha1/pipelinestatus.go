/*
#########################
#  SAP Steward-CI       #
#########################

THIS CODE IS GENERATED! DO NOT TOUCH!

Copyright SAP SE.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/SAP/stewardci-core/pkg/apis/steward/v1alpha1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PipelineStatusApplyConfiguration represents an declarative configuration of the PipelineStatus type for use
// with apply.
type PipelineStatusApplyConfiguration struct {
	StartedAt          *v1.Time                      `json:"startedAt,omitempty"`
	FinishedAt         *v1.Time                      `json:"finishedAt,omitempty"`
	State              *v1alpha1.State               `json:"state,omitempty"`
	StateDetails       *StateItemApplyConfiguration  `json:"stateDetails,omitempty"`
	StateHistory       []StateItemApplyConfiguration `json:"stateHistory,omitempty"`
	Result             *v1alpha1.Result              `json:"result,omitempty"`
	Container          *corev1.ContainerState        `json:"container,omitempty"`
	MessageShort       *string                       `json:"messageShort,omitempty"`
	Message            *string                       `json:"message,omitempty"`
	History            []string                      `json:"history,omitempty"`
	Namespace          *string                       `json:"namespace,omitempty"`
	AuxiliaryNamespace *string                       `json:"auxiliaryNamespace,omitempty"`
}

// PipelineStatusApplyConfiguration constructs an declarative configuration of the PipelineStatus type for use with
// apply.
func PipelineStatus() *PipelineStatusApplyConfiguration {
	return &PipelineStatusApplyConfiguration{}
}

// WithStartedAt sets the StartedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartedAt field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithStartedAt(value v1.Time) *PipelineStatusApplyConfiguration {
	b.StartedAt = &value
	return b
}

// WithFinishedAt sets the FinishedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FinishedAt field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithFinishedAt(value v1.Time) *PipelineStatusApplyConfiguration {
	b.FinishedAt = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithState(value v1alpha1.State) *PipelineStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithStateDetails sets the StateDetails field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StateDetails field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithStateDetails(value *StateItemApplyConfiguration) *PipelineStatusApplyConfiguration {
	b.StateDetails = value
	return b
}

// WithStateHistory adds the given value to the StateHistory field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StateHistory field.
func (b *PipelineStatusApplyConfiguration) WithStateHistory(values ...*StateItemApplyConfiguration) *PipelineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStateHistory")
		}
		b.StateHistory = append(b.StateHistory, *values[i])
	}
	return b
}

// WithResult sets the Result field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Result field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithResult(value v1alpha1.Result) *PipelineStatusApplyConfiguration {
	b.Result = &value
	return b
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithContainer(value corev1.ContainerState) *PipelineStatusApplyConfiguration {
	b.Container = &value
	return b
}

// WithMessageShort sets the MessageShort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MessageShort field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithMessageShort(value string) *PipelineStatusApplyConfiguration {
	b.MessageShort = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithMessage(value string) *PipelineStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithHistory adds the given value to the History field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the History field.
func (b *PipelineStatusApplyConfiguration) WithHistory(values ...string) *PipelineStatusApplyConfiguration {
	for i := range values {
		b.History = append(b.History, values[i])
	}
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithNamespace(value string) *PipelineStatusApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithAuxiliaryNamespace sets the AuxiliaryNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuxiliaryNamespace field is set to the value of the last call.
func (b *PipelineStatusApplyConfiguration) WithAuxiliaryNamespace(value string) *PipelineStatusApplyConfiguration {
	b.AuxiliaryNamespace = &value
	return b
}
