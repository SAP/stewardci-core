/*
#########################
#  SAP Steward-CI       #
#########################

THIS CODE IS GENERATED! DO NOT TOUCH!

Copyright SAP SE.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	stewardv1alpha1 "github.com/SAP/stewardci-core/pkg/apis/steward/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PipelineSpecApplyConfiguration represents an declarative configuration of the PipelineSpec type for use
// with apply.
type PipelineSpecApplyConfiguration struct {
	JenkinsfileRunner *JenkinsfileRunnerSpecApplyConfiguration `json:"jenkinsfileRunner,omitempty"`
	JenkinsFile       *JenkinsFileApplyConfiguration           `json:"jenkinsFile,omitempty"`
	Args              map[string]string                        `json:"args,omitempty"`
	Secrets           []string                                 `json:"secrets,omitempty"`
	ImagePullSecrets  []string                                 `json:"imagePullSecrets,omitempty"`
	Intent            *stewardv1alpha1.Intent                  `json:"intent,omitempty"`
	Logging           *LoggingApplyConfiguration               `json:"logging,omitempty"`
	RunDetails        *PipelineRunDetailsApplyConfiguration    `json:"runDetails,omitempty"`
	Profiles          *ProfilesApplyConfiguration              `json:"profiles,omitempty"`
	Timeout           *v1.Duration                             `json:"timeout,omitempty"`
}

// PipelineSpecApplyConfiguration constructs an declarative configuration of the PipelineSpec type for use with
// apply.
func PipelineSpec() *PipelineSpecApplyConfiguration {
	return &PipelineSpecApplyConfiguration{}
}

// WithJenkinsfileRunner sets the JenkinsfileRunner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JenkinsfileRunner field is set to the value of the last call.
func (b *PipelineSpecApplyConfiguration) WithJenkinsfileRunner(value *JenkinsfileRunnerSpecApplyConfiguration) *PipelineSpecApplyConfiguration {
	b.JenkinsfileRunner = value
	return b
}

// WithJenkinsFile sets the JenkinsFile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JenkinsFile field is set to the value of the last call.
func (b *PipelineSpecApplyConfiguration) WithJenkinsFile(value *JenkinsFileApplyConfiguration) *PipelineSpecApplyConfiguration {
	b.JenkinsFile = value
	return b
}

// WithArgs puts the entries into the Args field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Args field,
// overwriting an existing map entries in Args field with the same key.
func (b *PipelineSpecApplyConfiguration) WithArgs(entries map[string]string) *PipelineSpecApplyConfiguration {
	if b.Args == nil && len(entries) > 0 {
		b.Args = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Args[k] = v
	}
	return b
}

// WithSecrets adds the given value to the Secrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Secrets field.
func (b *PipelineSpecApplyConfiguration) WithSecrets(values ...string) *PipelineSpecApplyConfiguration {
	for i := range values {
		b.Secrets = append(b.Secrets, values[i])
	}
	return b
}

// WithImagePullSecrets adds the given value to the ImagePullSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImagePullSecrets field.
func (b *PipelineSpecApplyConfiguration) WithImagePullSecrets(values ...string) *PipelineSpecApplyConfiguration {
	for i := range values {
		b.ImagePullSecrets = append(b.ImagePullSecrets, values[i])
	}
	return b
}

// WithIntent sets the Intent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Intent field is set to the value of the last call.
func (b *PipelineSpecApplyConfiguration) WithIntent(value stewardv1alpha1.Intent) *PipelineSpecApplyConfiguration {
	b.Intent = &value
	return b
}

// WithLogging sets the Logging field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Logging field is set to the value of the last call.
func (b *PipelineSpecApplyConfiguration) WithLogging(value *LoggingApplyConfiguration) *PipelineSpecApplyConfiguration {
	b.Logging = value
	return b
}

// WithRunDetails sets the RunDetails field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RunDetails field is set to the value of the last call.
func (b *PipelineSpecApplyConfiguration) WithRunDetails(value *PipelineRunDetailsApplyConfiguration) *PipelineSpecApplyConfiguration {
	b.RunDetails = value
	return b
}

// WithProfiles sets the Profiles field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Profiles field is set to the value of the last call.
func (b *PipelineSpecApplyConfiguration) WithProfiles(value *ProfilesApplyConfiguration) *PipelineSpecApplyConfiguration {
	b.Profiles = value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *PipelineSpecApplyConfiguration) WithTimeout(value v1.Duration) *PipelineSpecApplyConfiguration {
	b.Timeout = &value
	return b
}
