// /*
// #########################
// #  SAP Steward-CI       #
// #########################
//
// THIS CODE IS GENERATED! DO NOT TOUCH!
//
// Copyright SAP SE.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SAP/stewardci-core/pkg/metrics (interfaces: Metrics)

// Package mocks is a generated GoMock package.
package mocks

import (
	v1alpha1 "github.com/SAP/stewardci-core/pkg/apis/steward/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// CountResult mocks base method
func (m *MockMetrics) CountResult(arg0 v1alpha1.Result) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountResult", arg0)
}

// CountResult indicates an expected call of CountResult
func (mr *MockMetricsMockRecorder) CountResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountResult", reflect.TypeOf((*MockMetrics)(nil).CountResult), arg0)
}

// CountStart mocks base method
func (m *MockMetrics) CountStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountStart")
}

// CountStart indicates an expected call of CountStart
func (mr *MockMetricsMockRecorder) CountStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountStart", reflect.TypeOf((*MockMetrics)(nil).CountStart))
}

// ObserveDurationByState mocks base method
func (m *MockMetrics) ObserveDurationByState(arg0 *v1alpha1.StateItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveDurationByState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObserveDurationByState indicates an expected call of ObserveDurationByState
func (mr *MockMetricsMockRecorder) ObserveDurationByState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDurationByState", reflect.TypeOf((*MockMetrics)(nil).ObserveDurationByState), arg0)
}

// ObserveOngoingStateDuration mocks base method
func (m *MockMetrics) ObserveOngoingStateDuration(arg0 *v1alpha1.PipelineRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveOngoingStateDuration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObserveOngoingStateDuration indicates an expected call of ObserveOngoingStateDuration
func (mr *MockMetricsMockRecorder) ObserveOngoingStateDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveOngoingStateDuration", reflect.TypeOf((*MockMetrics)(nil).ObserveOngoingStateDuration), arg0)
}

// ObserveUpdateDurationByType mocks base method
func (m *MockMetrics) ObserveUpdateDurationByType(arg0 string, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveUpdateDurationByType", arg0, arg1)
}

// ObserveUpdateDurationByType indicates an expected call of ObserveUpdateDurationByType
func (mr *MockMetricsMockRecorder) ObserveUpdateDurationByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveUpdateDurationByType", reflect.TypeOf((*MockMetrics)(nil).ObserveUpdateDurationByType), arg0, arg1)
}

// SetQueueCount mocks base method
func (m *MockMetrics) SetQueueCount(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQueueCount", arg0)
}

// SetQueueCount indicates an expected call of SetQueueCount
func (mr *MockMetricsMockRecorder) SetQueueCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueCount", reflect.TypeOf((*MockMetrics)(nil).SetQueueCount), arg0)
}

// StartServer mocks base method
func (m *MockMetrics) StartServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartServer")
}

// StartServer indicates an expected call of StartServer
func (mr *MockMetricsMockRecorder) StartServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockMetrics)(nil).StartServer))
}
