// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/metrics/metrics.go

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	v1alpha1 "github.com/SAP/stewardci-core/pkg/apis/steward/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// CountStart mocks base method
func (m *MockMetrics) CountStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountStart")
}

// CountStart indicates an expected call of CountStart
func (mr *MockMetricsMockRecorder) CountStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountStart", reflect.TypeOf((*MockMetrics)(nil).CountStart))
}

// CountResult mocks base method
func (m *MockMetrics) CountResult(arg0 v1alpha1.Result) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountResult", arg0)
}

// CountResult indicates an expected call of CountResult
func (mr *MockMetricsMockRecorder) CountResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountResult", reflect.TypeOf((*MockMetrics)(nil).CountResult), arg0)
}

// ObserveDurationByState mocks base method
func (m *MockMetrics) ObserveDurationByState(state *v1alpha1.StateItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveDurationByState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObserveDurationByState indicates an expected call of ObserveDurationByState
func (mr *MockMetricsMockRecorder) ObserveDurationByState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDurationByState", reflect.TypeOf((*MockMetrics)(nil).ObserveDurationByState), state)
}

// ObserveOngoingStateDuration mocks base method
func (m *MockMetrics) ObserveOngoingStateDuration(state *v1alpha1.PipelineRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveOngoingStateDuration", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObserveOngoingStateDuration indicates an expected call of ObserveOngoingStateDuration
func (mr *MockMetricsMockRecorder) ObserveOngoingStateDuration(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveOngoingStateDuration", reflect.TypeOf((*MockMetrics)(nil).ObserveOngoingStateDuration), state)
}

// ObserveUpdateDurationByType mocks base method
func (m *MockMetrics) ObserveUpdateDurationByType(kind string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveUpdateDurationByType", kind, duration)
}

// ObserveUpdateDurationByType indicates an expected call of ObserveUpdateDurationByType
func (mr *MockMetricsMockRecorder) ObserveUpdateDurationByType(kind, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveUpdateDurationByType", reflect.TypeOf((*MockMetrics)(nil).ObserveUpdateDurationByType), kind, duration)
}

// StartServer mocks base method
func (m *MockMetrics) StartServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartServer")
}

// StartServer indicates an expected call of StartServer
func (mr *MockMetricsMockRecorder) StartServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockMetrics)(nil).StartServer))
}

// SetQueueCount mocks base method
func (m *MockMetrics) SetQueueCount(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQueueCount", arg0)
}

// SetQueueCount indicates an expected call of SetQueueCount
func (mr *MockMetricsMockRecorder) SetQueueCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueCount", reflect.TypeOf((*MockMetrics)(nil).SetQueueCount), arg0)
}
